name: Build & Release

on:
  workflow_call:
    inputs:
      architectures:
        description: A JSON list of GOARCH values for which to build
        default: '["amd64", "arm64"]'
        required: false
        type: string
      push-container-image:
        description: Whether to push the resulting container image to the registry
        default: false
        required: false
        type: boolean
      create-release:
        description: Whether to create a Github release and attach the artifacts to it
        default: false
        required: false
        type: boolean

permissions:
  contents: write
  packages: write

jobs:
  build-go:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ${{ fromJson(inputs.architectures) }}
    steps:
      - name: Check out code
        uses: actions/checkout@v5

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run linter
        uses: golangci/golangci-lint-action@v8

      - name: Run tests
        run: |-
          go test -v ./...

      - name: Build
        run: |-
          mkdir -p $GITHUB_WORKSPACE/dist

          CGO_ENABLED=0 \
          GOARCH=${{ matrix.arch }} \
          GOOS=linux \
            go build \
            -ldflags '\
              -s -w \
              -buildid=${{ github.sha }} \
              -X main.version=${{ github.ref_name }} \
              -X main.commit=${{ github.sha }} \
            ' \
            -trimpath -mod=readonly \
            -o $GITHUB_WORKSPACE/dist/multigres-operator-${{ matrix.arch }} \
            ./cmd/multigres-operator

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: multigres-operator-${{matrix.arch}}
          path: dist/*

  build-push-container:
    needs: [ build-go ]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract container metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch,prefix=
            type=ref,event=tag,prefix=
            type=sha,format=short,prefix=
            type=sha,format=long,prefix=

      - uses: actions/download-artifact@v5
        with:
          pattern: multigres-operator-*
          path: dist/

      - name: Build and push container image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Containerfile
          platforms: linux/${{ join(fromJson(inputs.architectures), ',linux/') }}
          push: ${{ inputs.push-container-image }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    needs: [ build-go ]
    runs-on: ubuntu-latest
    if: ${{ inputs.create-release }}
    steps:
      - uses: actions/download-artifact@v5
        with:
          pattern: "*"
          path: dist/

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**