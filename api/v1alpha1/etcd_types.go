/*
Copyright 2025.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// NOTE: json tags are required.  Any new fields you add must have json tags for
// the fields to be serialized.

// EtcdSpec defines the desired state of an Etcd cluster managed by the operator
type EtcdSpec struct {
	// CellName is the name of the cell this MultiOrch belongs to.
	// +kubebuilder:validation:MinLength=1
	// +optional
	CellName string `json:"cellName,omitempty"`

	// Image is the container image for Etcd.
	// NOTE: The version information is taken from Multigres repo's local
	// provisioning setup:
	// https://github.com/multigres/multigres/blob/38264ed3cb5049961a1e3d8a9de4836f8215ca76/go/provisioner/local/config.go#L186
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:default="gcr.io/etcd-development/etcd:v3.5.9"
	// +optional
	Image string `json:"image,omitempty"`

	// ImagePullSecrets is an optional list of references to secrets in the same namespace
	// to use for pulling the image.
	// +optional
	ImagePullSecrets []corev1.LocalObjectReference `json:"imagePullSecrets,omitempty"`

	// Replicas is the desired number of Etcd members.
	// For high availability, use an odd number (typically 3 or 5).
	// +kubebuilder:validation:Minimum=1
	// +kubebuilder:default=3
	// +optional
	Replicas *int32 `json:"replicas,omitempty"`

	// Resources defines the resource requirements for the Etcd container.
	// +optional
	Resources corev1.ResourceRequirements `json:"resources,omitempty"`

	// ServiceAccountName is the name of the ServiceAccount to use for the Etcd pods.
	// +optional
	ServiceAccountName string `json:"serviceAccountName,omitempty"`

	// StorageClassName is the name of the StorageClass to use for Etcd data volumes.
	// If not specified, the default StorageClass will be used.
	// +optional
	StorageClassName *string `json:"storageClassName,omitempty"`

	// StorageSize is the size of the persistent volume for each Etcd member.
	// +kubebuilder:default="10Gi"
	// +optional
	StorageSize string `json:"storageSize,omitempty"`

	// VolumeClaimTemplate allows customization of the PersistentVolumeClaim for Etcd data.
	// If specified, this takes precedence over StorageClassName and StorageSize.
	// +optional
	VolumeClaimTemplate *corev1.PersistentVolumeClaimSpec `json:"volumeClaimTemplate,omitempty"`

	// Affinity defines pod affinity and anti-affinity rules.
	// +optional
	Affinity *corev1.Affinity `json:"affinity,omitempty"`

	// Tolerations allows pods to schedule onto nodes with matching taints.
	// +optional
	Tolerations []corev1.Toleration `json:"tolerations,omitempty"`

	// NodeSelector is a selector which must be true for the pod to fit on a node.
	// +optional
	NodeSelector map[string]string `json:"nodeSelector,omitempty"`

	// TopologySpreadConstraints controls how pods are spread across topology domains.
	// +optional
	TopologySpreadConstraints []corev1.TopologySpreadConstraint `json:"topologySpreadConstraints,omitempty"`

	// PodAnnotations are annotations to add to the Etcd pods.
	// +optional
	PodAnnotations map[string]string `json:"podAnnotations,omitempty"`

	// PodLabels are additional labels to add to the Etcd pods.
	// These are merged with the standard labels generated by the operator.
	// In case of a key conflict, the operator's standard labels take precedence.
	// +optional
	PodLabels map[string]string `json:"podLabels,omitempty"`
}

// EtcdStatus defines the observed state of Etcd.
type EtcdStatus struct {
	// Ready indicates whether the Etcd cluster is healthy and available.
	Ready bool `json:"ready"`

	// Replicas is the desired number of Etcd members.
	Replicas int32 `json:"replicas"`

	// ReadyReplicas is the number of ready Etcd members.
	ReadyReplicas int32 `json:"readyReplicas"`

	// ObservedGeneration reflects the generation of the most recently observed Etcd spec.
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`

	// Conditions represent the latest available observations of the Etcd cluster's state.
	// +listType=map
	// +listMapKey=type
	// +optional
	Conditions []metav1.Condition `json:"conditions,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type=boolean,JSONPath=`.status.ready`
// +kubebuilder:printcolumn:name="Replicas",type=string,JSONPath=`.status.readyReplicas`
// +kubebuilder:printcolumn:name="Age",type=date,JSONPath=`.metadata.creationTimestamp`

// Etcd is the Schema for the etcds API
type Etcd struct {
	metav1.TypeMeta `json:",inline"`

	// metadata is a standard object metadata
	// +optional
	metav1.ObjectMeta `json:"metadata,omitempty,omitzero"`

	// spec defines the desired state of Etcd
	// +required
	Spec EtcdSpec `json:"spec"`

	// status defines the observed state of Etcd
	// +optional
	Status EtcdStatus `json:"status,omitempty,omitzero"`
}

// +kubebuilder:object:root=true

// EtcdList contains a list of Etcd
type EtcdList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Etcd `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Etcd{}, &EtcdList{})
}
