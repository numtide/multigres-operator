/*
Copyright 2025.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ============================================================================
// TableGroup Spec (Read-only API)
// ============================================================================

// TableGroupSpec defines the desired state of TableGroup
// This spec is populated by the MultigresCluster controller.
// These fields will be generated by MultigresCluster controller from information the user provides in that spec.

type TableGroupSpec struct {
	// Images required for this table group's child shards.
	// +optional
	Images ShardImagesSpec `json:"images,omitempty"`

	// Partitioning defines how this table group is sharded.
	Partitioning PartitioningSpec `json:"partitioning"`

	// ShardTemplate is the template used to create Shard CRs.
	ShardTemplate ShardTemplateSpec `json:"shardTemplate"`
}

// PartitioningSpec defines how a table group is sharded.
type PartitioningSpec struct {
	// Shards is the number of shards in this table group.
	// +kubebuilder:validation:Minimum=1
	Shards int32 `json:"shards"`
}

// ShardTemplateSpec holds the template for creating Shard CRs.
type ShardTemplateSpec struct {
	// Pools defines the pod templates for the shards.
	// This will be copied into each child Shard's spec.
	// +optional
	Pools []ShardPoolSpec `json:"pools,omitempty"`
}

// ============================================================================
// CR Controller Status Specs
// ============================================================================

// TableGroupStatus defines the observed state of TableGroup
type TableGroupStatus struct {
	// ObservedGeneration is the most recent generation observed by the controller.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`

	// Conditions represent the latest available observations of the TableGroup's state.
	// +optional
	Conditions []metav1.Condition `json:"conditions,omitempty"`

	// Shards is the desired number of shards.
	// +optional
	Shards int32 `json:"shards,omitempty"`

	// ReadyShards is the number of child Shard CRs that are ready.
	// +optional
	ReadyShards int32 `json:"readyShards,omitempty"`
}

// ============================================================================
// Kind Definition and registration
// ============================================================================

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.conditions[?(@.type=='Available')].status",description="Current availability status"
// +kubebuilder:printcolumn:name="Ready Shards",type="string",JSONPath=".status.readyShards",description="Ready shards"
// +kubebuilder:printcolumn:name="Total Shards",type="string",JSONPath=".status.shards",description="Total shards"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"

// TableGroup is the Schema for the TableGroups API
type TableGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   TableGroupSpec   `json:"spec,omitempty"`
	Status TableGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TableGroupList contains a list of TableGroup
type TableGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TableGroup `json:"items"`
}

func init() {
	SchemeBuilder.Register(&TableGroup{}, &TableGroupList{})
}
